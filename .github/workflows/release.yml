name: Build/release

on: push

jobs:
  release:
    runs-on: self-hosted
    permissions:
      contents: write
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 21.7.1

      - if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Running Linux specific steps"
          npm i
          npx update-browserslist-db@latest
          npm run dist-linux
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Build Number
        if: matrix.os == 'ubuntu-latest'
        id: build_number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: matrix.os == 'ubuntu-latest'
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build_number.outputs.build_number }}
          release_name: Release-${{ steps.build_number.outputs.build_number }}
          draft: false
          prerelease: false

      - name: Find and Upload Assets
        if: matrix.os == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          declare -A asset_types=(
            ["deb"]="application/vnd.debian.binary-package"
            ["snap"]="application/octet-stream"
            ["AppImage"]="application/octet-stream"
          )

          for asset_type in "${!asset_types[@]}"; do
            asset_file=$(find ./dist -name "*.$asset_type" -type f -print -quit)
            if [ -n "$asset_file" ]; then
              asset_name=$(basename "$asset_file")
              echo "Uploading $asset_name"
              gh release upload ${{ steps.create_release.outputs.id }} "$asset_file" --name "$asset_name" --content-type "${asset_types[$asset_type]}"
            fi
          done