name: Build/release

on: push

jobs:
  release:
    runs-on: [windows-latest]
    permissions:
      contents: write
    strategy:
      matrix:
        os: [windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '21.7.1'
      - name: Get Build Number
        id: build_number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Linux Release
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Running Linux specific steps"
          npm i
          npx update-browserslist-db@latest
          npm run dist-linux
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Windows Release
        if: matrix.os == 'windows-latest'
        run: |
          echo "Running Windows specific steps"
          npm i
          npx update-browserslist-db@latest
          npm run dist-windows
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.build_number.outputs.build_number }}
          release_name: Release-${{ steps.build_number.outputs.build_number }}
          draft: false
          prerelease: false
      - name: Find .deb Asset
        if: matrix.os == 'ubuntu-latest'
        id: find_deb_asset
        run: |
          DEB_FILE=$(find ./dist -name "*.deb" -type f -print -quit)
          echo "::set-output name=deb_file::$DEB_FILE"
      - name: Find .snap Asset
        if: matrix.os == 'ubuntu-latest'
        id: find_snap_asset
        run: |
          SNAP_FILE=$(find ./dist -name "*.snap" -type f -print -quit)
          echo "::set-output name=snap_file::$SNAP_FILE"
      - name: Find .AppImage Asset
        if: matrix.os == 'ubuntu-latest'
        id: find_appimage_asset
        run: |
          APPIMAGE_FILE=$(find ./dist -name "*.AppImage" -type f -print -quit)
          echo "::set-output name=appimage_file::$APPIMAGE_FILE"
      - name: Upload .deb Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_deb_asset.outputs.deb_file }}
          asset_name: ${{ steps.find_deb_asset.outputs.deb_file }}
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload .snap Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_snap_asset.outputs.snap_file }}
          asset_name: ${{ steps.find_snap_asset.outputs.snap_file }}
          asset_content_type: application/octet-stream
      - name: Upload .AppImage Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_appimage_asset.outputs.appimage_file }}
          asset_name: ${{ steps.find_appimage_asset.outputs.appimage_file }}
          asset_content_type: application/octet-stream
      - name: Find .exe Asset
        if: matrix.os == 'windows-latest'
        id: find_exe_asset
        run: |
          $EXE_FILE = (Get-ChildItem -Path "./dist" -Filter "*.exe" -Recurse | Select-Object -First 1).FullName
          echo "EXE_FILE=$EXE_FILE" >> $env:GITHUB_ENV
      - name: Find .msi Asset
        if: matrix.os == 'windows-latest'
        id: find_msi_asset
        run: |
          $MSI_FILE = (Get-ChildItem -Path "./dist" -Filter "*.msi" -Recurse | Select-Object -First 1).FullName
          echo "MSI_FILE=$MSI_FILE" >> $env:GITHUB_ENV
      - name: Upload .exe Asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.EXE_FILE }}
          asset_name: ${{ steps.find_exe_asset.outputs.exe_file }}
          asset_content_type: application/octet-stream
      - name: Upload .msi Asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.MSI_FILE }}
          asset_name: ${{ steps.find_msi_asset.outputs.msi_file }}
          asset_content_type: application/octet-stream